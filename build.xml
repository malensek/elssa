<?xml version="1.0" standalone="yes"?>

<project name="galileo-net" basedir="." default="jar">
    <!-- Build properties -->
    <property name="project.version" value="1.0"/>
    <property name="project.url" value="http://galileo.cs.colostate.edu"/>
    <tstamp>
        <format property="build.date" pattern="MM-dd-yyyy"/>
    </tstamp>

    <!-- Directories -->
    <property name="src" value="src"/>
    <property name="build" value="classes"/>
    <property name="lib" value="lib"/>
    <property name="docs" value="docs/api"/>
    <property name="depcache" value="depcache"/>
    <property name="jar.name"
            value="${lib}/${ant.project.name}-${project.version}.jar"/>
    <property file="build.properties"/>

    <path id="classpath">
        <fileset dir="." includes="lib/*.jar"/>
    </path>

    <target name="compile" description="Compile source files">
        <mkdir dir="${build}"/>

        <depend srcdir="${src}"
                destdir="${build}"
                cache="${depcache}"
                closure="yes"/>

        <javac srcdir="${src}"
                destdir="${build}"
                classpathref="classpath"
                debug="on"
                includeantruntime="false">

            <compilerarg value="-Xlint"/>

            <!-- These can be enabled selectively using ant command line options
              (-Dbuild.tests=true) or you can override these properties by
              creating a build.properties file for your local environment -->
            <exclude name="galileo/test/**" unless="${build.tests}"/>
            <exclude name="galileo/samples/**" unless="${build.samples}"/>
        </javac>
    </target>

    <target name="testcompile">
        <echo>Compiling with build.tests=true</echo>
        <antcall target="compile">
            <param name="build.tests" value="true"/>
        </antcall>
    </target>

    <target name="jar" depends="compile">
        <mkdir dir="${lib}"/>

        <manifestclasspath property="jar.classpath" jarfile="${jar.name}">
            <classpath refid="classpath"/>
        </manifestclasspath>

        <jar basedir="${build}" jarfile="${jar.name}">
            <manifest>
                <attribute name="Built-By"
                        value="${user.name}"/>
                <attribute name="Specification-Title"
                        value="${ant.project.name}"/>
                <attribute name="Specification-Version"
                        value="${project.version}"/>
                <attribute name="Specification-URL"
                        value="${project.url}"/>
            </manifest>
        </jar>
    </target>

    <target name="javadoc" description="Generates javadoc">
        <antcall target="compile">
            <param name="build.tests" value="false"/>
            <param name="build.samples" value="false"/>
        </antcall>
 
        <mkdir dir="${docs}"/>

        <property name="doctitle"
                value="${ant.project.name} ${project.version} Documentation"/>

        <javadoc sourcepath="${src}"
                destdir="${docs}"
                classpathref="classpath"
                doctitle="${doctitle}"
                windowtitle="${doctitle}"/>
    </target>

    <target name="test" depends="testcompile,jar">
        <junit printsummary="yes" fork="yes" haltonfailure="yes">
            <classpath refid="classpath"/>
            <formatter type="plain" usefile="false"/>
            <test name="galileo.test.dataset.feature.TestSuite"/>
            <test name="galileo.test.dht.partitioning.TestSuite"/>
            <test name="galileo.test.graph.TestSuite"/>
        </junit>
    </target>

    <!-- cleans up everything from the releaseclean task, plus additional files
      that should not be cleaned up for a release -->
    <target name="clean" depends="releaseclean">
        <delete dir="${docs}"/>
        <delete file="${jar.name}"/>
    </target>

    <!-- cleans up any files that should not be included in a release zip -->
    <target name="releaseclean">
        <delete dir="${build}"/>
        <delete dir="${depcache}"/>
        <delete dir="release"/>
        <delete file="${ant.project.name}-${project.version}.zip"/>
    </target>

    <target name="release" depends="compile,jar,javadoc,releaseclean">
        <echo>Generating release ${project.version}</echo>
        <echo>Built by: ${user.name} on ${build.date}</echo>
        <echo>Operating System: ${os.name} ${os.version}</echo>

        <property name="reldir"
            value="release/${ant.project.name}-${project.version}"/>
        <mkdir dir="${reldir}"/>
        <copy todir="${reldir}">
            <!-- ignore hidden files -->
            <fileset dir="." excludes="**/.*"/>
        </copy>
        <delete dir="${reldir}/release"/>
        <zip destfile="${ant.project.name}-${project.version}.zip"
             basedir="release"/>
        <delete dir="release"/>
    </target>
</project>
